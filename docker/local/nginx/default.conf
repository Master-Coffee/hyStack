upstream api {
  server api:8000;  # Defines an upstream server named 'api' running on the host 'api' and port 8000
}

server {

  client_max_body_size 20M;  # Sets the maximum allowed size for client request bodies to 20 megabytes

  listen 80;  # Listens on port 80 for incoming HTTP connections

  location /api/v1/ {
    proxy_pass http://api;  # Proxies incoming requests to the 'api' upstream server
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # Sets the X-Forwarded-For header with the client's IP address
    proxy_set_header Host $host;  # Sets the Host header with the value of the original client request
    proxy_redirect off;  # Disables redirecting responses from the upstream server


    #The follow lines and the conditional needed to be added so the "Blocked by CORS policy" error stopped . 
    #This error was blocking requests from my react frontend.
    # I was going crazy because of this shit.    

    add_header Access-Control-Allow-Origin $http_origin always;
    #add_header Access-Control-Allow-Credentials 'true' always;
    if ($request_method = 'OPTIONS') {
      add_header 'Access-Control-Allow-Origin' "$http_origin" always;
      add_header 'Access-Control-Allow-Credentials' 'true' always;
      add_header 'Access-Control-Allow-Headers' "Origin, X-Requested-With, Content-Type, Accept" always;
      add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
      add_header 'Access-Control-Max-Age' 1728000;
      add_header 'Content-Type' 'text/plain; charset=utf-8';
      add_header 'Content-Length' 0;
      return 204;
    }
  }

  location /supersecret {
    proxy_pass http://api;  # Proxies requests to the 'api' upstream server
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $host;
    proxy_redirect off;
  }

  location /redoc {
    proxy_pass http://api;  # Proxies requests to the 'api' upstream server
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $host;
    proxy_redirect off;
  }

  location /staticfiles/ {
    alias /app/staticfiles/;  # Maps requests for '/staticfiles/' to the '/app/staticfiles/' directory on the host
  }

  location /mediafiles/ {
    alias /app/mediafiles/;  # Maps requests for '/mediafiles/' to the '/app/mediafiles/' directory on the host
  }

}